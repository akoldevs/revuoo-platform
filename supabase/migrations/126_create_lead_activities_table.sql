-- This migration creates the table to store the activity feed for the Sales CRM.

-- Step 1: Create a custom type for the different kinds of activities.
CREATE TYPE public.lead_activity_type AS ENUM (
    'status_change',
    'note_added',
    'created'
);

-- Step 2: Create the 'lead_activities' table.
CREATE TABLE public.lead_activities (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    lead_id bigint NOT NULL,
    profile_id uuid NOT NULL, -- The admin/staff member who performed the action
    activity_type public.lead_activity_type NOT NULL,
    details jsonb, -- To store extra info, like the old and new status
    created_at timestamptz NOT NULL DEFAULT now(),

    CONSTRAINT lead_activities_pkey PRIMARY KEY (id),
    CONSTRAINT lead_activities_lead_id_fkey FOREIGN KEY (lead_id) REFERENCES public.leads(id) ON DELETE CASCADE,
    CONSTRAINT lead_activities_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.profiles(id) ON DELETE SET NULL
);

-- Step 3: Automatically log the creation of the first lead as an activity.
DO $$
DECLARE
    the_lead_id bigint;
    the_profile_id uuid;
BEGIN
    -- Find our existing test lead and its associated user profile
    SELECT id, profile_id INTO the_lead_id, the_profile_id FROM public.leads LIMIT 1;

    -- If the lead exists, log its creation.
    IF the_lead_id IS NOT NULL THEN
        INSERT INTO public.lead_activities (lead_id, profile_id, activity_type, details)
        VALUES (the_lead_id, the_profile_id, 'created', jsonb_build_object('status', 'new'));
    END IF;
END $$;