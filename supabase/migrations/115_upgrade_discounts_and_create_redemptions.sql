-- This migration upgrades the discounts table to an A+++ promotions engine
-- and adds a table to track redemptions. (Version 2 - Corrected)

-- Step 1: Remove the default value dependency from the 'status' column.
-- THIS IS THE FIX for the error you encountered.
ALTER TABLE public.discounts
  ALTER COLUMN status DROP DEFAULT;

-- Step 2: Now we can safely clean up the old enum type.
-- We must first change the column type to text before dropping the enum.
ALTER TABLE public.discounts
  ALTER COLUMN status TYPE text;

DROP TYPE public.discount_status;

-- Step 3: Upgrade the 'discounts' table with new A+++ features.
ALTER TABLE public.discounts
  -- Remove the old text-based status column
  DROP COLUMN status,

  -- Add a boolean for simple active/inactive toggle. It's faster and cleaner.
  ADD COLUMN is_active boolean NOT NULL DEFAULT true,

  -- Add a timestamp for when the code should expire.
  ADD COLUMN expires_at timestamptz,

  -- Add a limit for how many times the code can be used.
  ADD COLUMN max_redemptions integer,

  -- Add a list of plan IDs this discount can be applied to.
  -- Storing as an array of UUIDs. If null, it applies to all plans.
  ADD COLUMN plan_ids uuid[];


-- Step 4: Create the 'discount_redemptions' table to log every use of a code.
CREATE TABLE public.discount_redemptions (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    discount_id uuid NOT NULL,
    business_id bigint NOT NULL,
    user_id uuid NOT NULL,
    subscription_id uuid NOT NULL,
    redeemed_at timestamptz NOT NULL DEFAULT now(),

    CONSTRAINT discount_redemptions_pkey PRIMARY KEY (id),
    CONSTRAINT discount_redemptions_discount_id_fkey FOREIGN KEY (discount_id) REFERENCES public.discounts(id) ON DELETE CASCADE,
    CONSTRAINT discount_redemptions_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.businesses(id) ON DELETE CASCADE,
    CONSTRAINT discount_redemptions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE SET NULL,
    CONSTRAINT discount_redemptions_subscription_id_fkey FOREIGN KEY (subscription_id) REFERENCES public.subscriptions(id) ON DELETE CASCADE
);

-- Step 5: Add RLS policies for the new table.
-- First, enable RLS on the table.
ALTER TABLE public.discount_redemptions ENABLE ROW LEVEL SECURITY;

-- Create a policy so that only Admins can view redemption records.
CREATE POLICY "Admins can view all discount redemptions"
ON public.discount_redemptions
FOR SELECT
TO authenticated
USING (
  'admin' = ANY(get_user_roles())
);