--124_create_leads_table.sql
-- This migration creates the 'leads' table for our Sales CRM.

-- Step 1: Create a custom type for the lead status for data consistency.
CREATE TYPE public.lead_status AS ENUM (
    'new',
    'contacted',
    'qualified',
    'unqualified',
    'converted'
);

-- Step 2: Create the main 'leads' table.
CREATE TABLE public.leads (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    profile_id uuid NOT NULL,
    status public.lead_status NOT NULL DEFAULT 'new',
    source text, -- e.g., 'Website Signup', 'Contact Form', 'Manual Entry'
    notes text, -- For sales team's comments
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),

    CONSTRAINT leads_pkey PRIMARY KEY (id),
    -- Each user profile can only be a lead once to prevent duplicates.
    CONSTRAINT leads_profile_id_key UNIQUE (profile_id),
    CONSTRAINT leads_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.profiles(id) ON DELETE CASCADE
);

-- Step 3: Add an index for faster lookups by status.
CREATE INDEX idx_leads_status ON public.leads(status);

-- Step 4: Seed some initial test data for development.
-- This will create a lead for the 'akoldevs@gmail.com' user.
DO $$
DECLARE
    akoldevs_profile_id uuid;
BEGIN
    SELECT id INTO akoldevs_profile_id FROM public.profiles WHERE id = '1be6de19-fc57-4da4-a7d5-9f4c20840c53';
    
    IF akoldevs_profile_id IS NOT NULL THEN
        INSERT INTO public.leads (profile_id, source, status)
        VALUES (akoldevs_profile_id, 'Website Signup', 'new')
        ON CONFLICT (profile_id) DO NOTHING;
    END IF;
END $$;