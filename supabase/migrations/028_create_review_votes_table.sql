-- This table tracks upvotes and downvotes on reviews.

CREATE TABLE public.review_votes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  review_id BIGINT NOT NULL REFERENCES public.reviews(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  
  -- Vote type can be 'up' or 'down'
  vote_type TEXT NOT NULL CHECK (vote_type IN ('up', 'down')),
  
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

  -- A user can only vote once (up or down) on a single review
  CONSTRAINT unique_user_vote_per_review UNIQUE (review_id, user_id)
);

-- Add helper columns to the 'reviews' table for easy counting
ALTER TABLE public.reviews
  ADD COLUMN upvote_count INT NOT NULL DEFAULT 0,
  ADD COLUMN downvote_count INT NOT NULL DEFAULT 0;

-- Add RLS policies for the new table
ALTER TABLE public.review_votes ENABLE ROW LEVEL SECURITY;

-- 1. Users must be logged in to vote.
CREATE POLICY "Users can insert their own votes."
  ON public.review_votes FOR INSERT
  WITH CHECK ( auth.uid() = user_id );

-- 2. Users can see all votes.
CREATE POLICY "Votes are public and viewable by everyone."
  ON public.review_votes FOR SELECT
  USING (true);

-- 3. Users can change their own vote. (CORRECTED)
CREATE POLICY "Users can update their own vote."
  ON public.review_votes FOR UPDATE
  USING ( auth.uid() = user_id );

-- 4. Users can delete their own vote. (CORRECTED)
CREATE POLICY "Users can delete their own vote."
  ON public.review_votes FOR DELETE
  USING ( auth.uid() = user_id );