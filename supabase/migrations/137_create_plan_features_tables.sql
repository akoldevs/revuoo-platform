-- This migration creates the tables for a dynamic feature management system.

-- Step 1: Create the 'features' table to store a master list of all toggleable features.
CREATE TABLE IF NOT EXISTS public.features (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text NOT NULL, -- A machine-readable name, e.g., "integrations.zapier"
    description text,
    created_at timestamptz NOT NULL DEFAULT now(),

    CONSTRAINT features_pkey PRIMARY KEY (id),
    CONSTRAINT features_name_key UNIQUE (name)
);

-- Step 2: Create the 'plan_features' join table to link features to subscription plans.
CREATE TABLE IF NOT EXISTS public.plan_features (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    plan_id uuid NOT NULL,
    feature_id uuid NOT NULL,
    
    -- You can add limits here in the future, e.g., invitation_limit integer
    
    created_at timestamptz NOT NULL DEFAULT now(),

    CONSTRAINT plan_features_pkey PRIMARY KEY (id),
    CONSTRAINT plan_features_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES public.plans(id) ON DELETE CASCADE,
    CONSTRAINT plan_features_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.features(id) ON DELETE CASCADE,
    CONSTRAINT plan_features_plan_id_feature_id_key UNIQUE (plan_id, feature_id)
);

-- Step 3: Seed the 'features' table with the core features we want to control.
INSERT INTO public.features (name, description)
VALUES
    ('integrations.zapier', 'Allows businesses to connect their Zapier account.'),
    ('integrations.shopify', 'Allows businesses to connect their Shopify store.'),
    ('invitations.automated', 'Enables automated review invitations.'),
    ('widgets.review_carousel', 'Allows embedding of the Review Carousel widget.')
ON CONFLICT (name) DO NOTHING;

-- Step 4: Link these features to your existing plans as a starting point.
DO $$
DECLARE
    pro_plan_id uuid;
    advanced_plan_id uuid;
    zapier_feature_id uuid;
    shopify_feature_id uuid;
BEGIN
    -- Get the IDs of your plans
    SELECT id INTO pro_plan_id FROM public.plans WHERE name = 'Pro';
    SELECT id INTO advanced_plan_id FROM public.plans WHERE name = 'Advanced';
    
    -- Get the IDs of the features
    SELECT id INTO zapier_feature_id FROM public.features WHERE name = 'integrations.zapier';
    SELECT id INTO shopify_feature_id FROM public.features WHERE name = 'integrations.shopify';

    -- Assign Zapier to the Pro plan (if both exist)
    IF pro_plan_id IS NOT NULL AND zapier_feature_id IS NOT NULL THEN
        INSERT INTO public.plan_features (plan_id, feature_id)
        VALUES (pro_plan_id, zapier_feature_id)
        ON CONFLICT (plan_id, feature_id) DO NOTHING;
    END IF;

    -- Assign both Zapier and Shopify to the Advanced plan (if both exist)
    IF advanced_plan_id IS NOT NULL AND zapier_feature_id IS NOT NULL THEN
        INSERT INTO public.plan_features (plan_id, feature_id)
        VALUES (advanced_plan_id, zapier_feature_id)
        ON CONFLICT (plan_id, feature_id) DO NOTHING;
    END IF;
    IF advanced_plan_id IS NOT NULL AND shopify_feature_id IS NOT NULL THEN
        INSERT INTO public.plan_features (plan_id, feature_id)
        VALUES (advanced_plan_id, shopify_feature_id)
        ON CONFLICT (plan_id, feature_id) DO NOTHING;
    END IF;

END $$;