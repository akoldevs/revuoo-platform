-- First, create a reusable function that updates the 'updated_at' timestamp
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the table for storing responses from businesses to user reviews
CREATE TABLE public.business_responses (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  response_text TEXT NOT NULL CHECK (char_length(response_text) > 0),

  -- Links to other tables
  review_id BIGINT NOT NULL REFERENCES public.reviews(id) ON DELETE CASCADE,
  business_id BIGINT NOT NULL REFERENCES public.businesses(id) ON DELETE CASCADE,
  author_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,

  -- Moderation fields
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
  moderation_notes TEXT
);

-- Create a trigger to automatically update the updated_at column
CREATE TRIGGER handle_business_response_update
  BEFORE UPDATE ON public.business_responses
  FOR EACH ROW
  EXECUTE PROCEDURE public.update_updated_at_column();

-- Add comments for clarity
COMMENT ON TABLE public.business_responses IS 'Stores responses from business owners to user reviews.';
COMMENT ON COLUMN public.business_responses.status IS 'Moderation status of the response: pending, approved, or rejected.';

-- Enable Row Level Security (RLS)
ALTER TABLE public.business_responses ENABLE ROW LEVEL SECURITY;

-- Create policies for RLS
-- 1. Anyone can see responses that have been approved.
CREATE POLICY "Approved responses are viewable by everyone."
  ON public.business_responses FOR SELECT USING (status = 'approved');

-- 2. The business owner can see all responses for their business.
CREATE POLICY "Business owners can view all responses for their business."
  ON public.business_responses FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM public.businesses
      WHERE id = business_responses.business_id AND owner_id = auth.uid()
    )
  );

-- 3. The business owner can create responses for their business's reviews.
CREATE POLICY "Business owners can create responses."
  ON public.business_responses FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.businesses
      WHERE id = business_responses.business_id AND owner_id = auth.uid()
    )
  );

-- 4. The business owner can update their own responses.
CREATE POLICY "Business owners can update their own responses."
  ON public.business_responses FOR UPDATE USING (auth.uid() = author_id);